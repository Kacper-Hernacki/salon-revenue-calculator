---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'sync' | 'auto';
  fetchpriority?: 'high' | 'low' | 'auto';
}

const {
  src,
  alt,
  width,
  height,
  class: className = '',
  loading = 'lazy',
  decoding = 'async',
  fetchpriority = 'auto',
  ...rest
} = Astro.props;

// Generate WebP alternative if available
const webpSrc = src.replace(/\.(jpg|jpeg|png)$/i, '.webp');
const hasWebP = src !== webpSrc;
---

<picture class={className}>
  {hasWebP && (
    <source srcset={webpSrc} type="image/webp" />
  )}
  <img
    src={src}
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    decoding={decoding}
    fetchpriority={fetchpriority}
    {...rest}
  />
</picture>

<style>
  picture {
    display: contents;
  }
  
  img {
    max-width: 100%;
    height: auto;
  }
  
  /* Aspect ratio preservation */
  img[width][height] {
    aspect-ratio: attr(width) / attr(height);
  }
  
  /* Blur-up loading effect */
  img[loading="lazy"] {
    filter: blur(5px);
    transition: filter 0.3s ease-out;
  }
  
  img[loading="lazy"].loaded {
    filter: blur(0);
  }
</style>

<script>
  // Enhanced lazy loading with Intersection Observer
  if ('IntersectionObserver' in window) {
    const lazyImages = document.querySelectorAll('img[loading="lazy"]');
    
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target as HTMLImageElement;
          
          // Start loading the image
          const tempImg = new Image();
          tempImg.onload = () => {
            img.classList.add('loaded');
          };
          tempImg.src = img.src;
          
          observer.unobserve(img);
        }
      });
    }, {
      rootMargin: '50px'
    });
    
    lazyImages.forEach(img => imageObserver.observe(img));
  }
</script>