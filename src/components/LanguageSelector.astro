---
import { languageNames, type Lang } from '../i18n/config';

interface Props {
  currentLang: Lang;
  class?: string;
  variant?: 'default' | 'modal';
}

const { currentLang, class: className, variant = 'default' } = Astro.props;
---

<div class={`language-selector language-selector--${variant} ${className || ''}`}>
  <button 
    class="language-toggle" 
    id="languageToggle"
    aria-haspopup="true"
    aria-expanded="false"
    aria-label="Select language"
  >
    <svg class="language-icon" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
      <path fill-rule="evenodd" d="M7 2a1 1 0 011 1v1h3a1 1 0 110 2H9.578a18.87 18.87 0 01-1.724 4.78c.29.354.596.696.914 1.026a1 1 0 11-1.44 1.389c-.188-.196-.373-.396-.554-.6a19.098 19.098 0 01-3.107 3.567 1 1 0 01-1.334-1.49 17.087 17.087 0 003.13-3.733 18.992 18.992 0 01-1.487-2.494 1 1 0 111.79-.89c.234.47.489.928.764 1.372.417-.934.752-1.913.997-2.927H3a1 1 0 110-2h3V3a1 1 0 011-1zm6 6a1 1 0 01.894.553l2.991 5.982a.869.869 0 01.02.037l.99 1.98a1 1 0 11-1.79.895L15.383 16h-4.764l-.724 1.447a1 1 0 11-1.788-.894l.99-1.98.019-.038 2.99-5.982A1 1 0 0113 8zm-1.382 6h2.764L13 12.236 11.618 14z" clip-rule="evenodd"/>
    </svg>
    <span class="current-lang">{languageNames[currentLang].native}</span>
    <svg class="chevron" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
      <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"/>
    </svg>
  </button>
  
  <div class="language-dropdown" id="languageDropdown">
    <div class="language-list" role="menu">
      {Object.entries(languageNames).map(([code, names]) => (
        <button 
          class={`language-option ${code === currentLang ? 'active' : ''}`}
          data-lang={code}
          role="menuitem"
          aria-label={`Switch to ${names.english}`}
        >
          <span class="lang-native">{names.native}</span>
          <span class="lang-english">{names.english}</span>
          {code === currentLang && (
            <svg class="check-icon" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
            </svg>
          )}
        </button>
      ))}
    </div>
  </div>
</div>

<script>
  // Language selector functionality
  const languageToggle = document.getElementById('languageToggle');
  const languageDropdown = document.getElementById('languageDropdown');
  const languageOptions = document.querySelectorAll('.language-option');
  
  if (languageToggle && languageDropdown) {
    // Toggle dropdown
    languageToggle.addEventListener('click', () => {
      const isOpen = languageToggle.getAttribute('aria-expanded') === 'true';
      languageToggle.setAttribute('aria-expanded', String(!isOpen));
      languageDropdown.classList.toggle('show', !isOpen);
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', (event) => {
      const target = event.target as Node;
      if (!languageToggle.contains(target) && !languageDropdown.contains(target)) {
        languageToggle.setAttribute('aria-expanded', 'false');
        languageDropdown.classList.remove('show');
      }
    });
    
    // Handle language selection
    languageOptions.forEach(option => {
      option.addEventListener('click', () => {
        const selectedLang = option.getAttribute('data-lang');
        if (selectedLang) {
          // Store language preference
          localStorage.setItem('preferred-language', selectedLang);
          
          // Redirect to new language
          const currentPath = window.location.pathname;
          const currentLang = currentPath.split('/')[1];
          
          // Build new URL
          let newPath;
          if (selectedLang === 'en') {
            // English is the default, no prefix needed
            newPath = currentPath.replace(/^\/[a-z]{2}\//, '/') || '/';
          } else {
            if (currentLang.length === 2 && /^[a-z]{2}$/.test(currentLang)) {
              // Replace existing language prefix
              newPath = currentPath.replace(/^\/[a-z]{2}\//, `/${selectedLang}/`);
            } else {
              // Add language prefix
              newPath = `/${selectedLang}${currentPath}`;
            }
          }
          
          window.location.href = newPath;
        }
      });
    });
    
    // Keyboard navigation
    languageToggle.addEventListener('keydown', (event) => {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        languageToggle.click();
      }
    });
    
    languageDropdown.addEventListener('keydown', (event) => {
      const focusedOption = document.activeElement as HTMLElement;
      const options = Array.from(languageOptions) as HTMLElement[];
      const currentIndex = options.indexOf(focusedOption);
      
      switch (event.key) {
        case 'ArrowDown':
          event.preventDefault();
          const nextIndex = (currentIndex + 1) % options.length;
          options[nextIndex]?.focus();
          break;
        case 'ArrowUp':
          event.preventDefault();
          const prevIndex = currentIndex > 0 ? currentIndex - 1 : options.length - 1;
          options[prevIndex]?.focus();
          break;
        case 'Enter':
        case ' ':
          event.preventDefault();
          if (focusedOption) {
            focusedOption.click();
          }
          break;
        case 'Escape':
          languageToggle.setAttribute('aria-expanded', 'false');
          languageDropdown.classList.remove('show');
          languageToggle.focus();
          break;
      }
    });
  }
</script>

<style>
  .language-selector {
    position: relative;
    display: inline-block;
  }
  
  .language-toggle {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 12px;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 8px;
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 14px;
    backdrop-filter: blur(10px);
  }

  /* Modal variant with white background */
  .language-selector--modal .language-toggle {
    background: white;
    border: 1px solid #E5E7EB;
    color: #374151;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .language-selector--modal .language-toggle:hover {
    background: #F9FAFB;
    border-color: #D1D5DB;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .language-toggle:hover {
    background: rgba(255, 255, 255, 0.15);
    border-color: rgba(255, 255, 255, 0.3);
  }
  
  .language-toggle:focus {
    outline: 2px solid rgba(255, 255, 255, 0.5);
    outline-offset: 2px;
  }
  
  .language-icon {
    width: 16px;
    height: 16px;
    flex-shrink: 0;
  }
  
  .current-lang {
    font-weight: 500;
    white-space: nowrap;
  }
  
  .chevron {
    width: 16px;
    height: 16px;
    flex-shrink: 0;
    transition: transform 0.3s ease;
  }
  
  .language-toggle[aria-expanded="true"] .chevron {
    transform: rotate(180deg);
  }
  
  .language-dropdown {
    position: absolute;
    top: 100%;
    right: 0;
    margin-top: 8px;
    background: white;
    border: 1px solid #E5E7EB;
    border-radius: 8px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.3s ease;
    z-index: 1000;
    min-width: 200px;
  }
  
  .language-dropdown.show {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }
  
  .language-list {
    padding: 8px 0;
    max-height: 300px;
    overflow-y: auto;
  }
  
  .language-option {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    padding: 10px 16px;
    background: none;
    border: none;
    color: #374151;
    cursor: pointer;
    transition: background-color 0.2s ease;
    text-align: left;
  }
  
  .language-option:hover {
    background: #F3F4F6;
  }
  
  .language-option:focus {
    outline: none;
    background: #EEF2FF;
  }
  
  .language-option.active {
    background: #EEF2FF;
    color: #6366F1;
  }
  
  .lang-native {
    font-weight: 500;
    margin-right: 8px;
  }
  
  .lang-english {
    font-size: 12px;
    color: #6B7280;
    flex: 1;
    text-align: right;
    margin-right: 8px;
  }
  
  .check-icon {
    width: 16px;
    height: 16px;
    color: #6366F1;
    flex-shrink: 0;
  }
  
  /* RTL language support */
  .language-selector[dir="rtl"] .language-dropdown {
    left: 0;
    right: auto;
  }
  
  .language-selector[dir="rtl"] .lang-english {
    text-align: left;
    margin-right: 0;
    margin-left: 8px;
  }
  
  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .language-dropdown {
      right: 0;
      left: auto;
      min-width: 180px;
    }
    
    .language-toggle {
      padding: 6px 10px;
      font-size: 13px;
    }
    
    .language-option {
      padding: 12px 16px;
    }
  }
  
  /* Reduce motion for accessibility */
  @media (prefers-reduced-motion: reduce) {
    .language-toggle,
    .language-dropdown,
    .chevron {
      transition: none;
    }
  }
</style>